; ModuleID = 'test'
source_filename = "test"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.TestNonTrivialConstructor = type { i32 }
%"class.std::bad_function_call" = type { %"class.std::exception" }
%"class.std::exception" = type { i32 (...)** }

@_ZTVSt17bad_function_call = external dso_local unnamed_addr constant { [5 x i8*] }, align 8
@_ZTISt17bad_function_call = external dso_local constant i8*

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind uwtable
define available_externally dso_local void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI25TestNonTrivialConstructorE9wrapperFnEPS2_(%class.TestNonTrivialConstructor* %0) #0 align 2 {
  ret void
}

; Function Attrs: uwtable
define available_externally dso_local void @_ZN7PochiVM16ReflectionHelper23function_wrapper_helperIXadL_ZN25TestNonTrivialConstructor7Create2EiEEE15call_fn_wrapperIS2_vE4callIJiEEEvPS2_DpT_(%class.TestNonTrivialConstructor* %0, i32 %1) #1 align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = icmp eq i32 %1, 12345
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = tail call i8* @__cxa_allocate_exception(i64 8) #3
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVSt17bad_function_call, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !4
  tail call void @__cxa_throw(i8* %5, i8* bitcast (i8** @_ZTISt17bad_function_call to i8*), i8* bitcast (void (%"class.std::bad_function_call"*)* @_ZNSt17bad_function_callD1Ev to i8*)) #5
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.TestNonTrivialConstructor, %class.TestNonTrivialConstructor* %0, i64 0, i32 0
  store i32 %1, i32* %8, align 4
  ret void
}

declare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr

; Function Attrs: nounwind
declare dso_local void @_ZNSt17bad_function_callD1Ev(%"class.std::bad_function_call"*) unnamed_addr #2

declare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr

; Function Attrs: nounwind uwtable
define available_externally dso_local i32 @_ZN25TestNonTrivialConstructor8GetValueEv(%class.TestNonTrivialConstructor* %0) #0 align 2 {
  %2 = getelementptr inbounds %class.TestNonTrivialConstructor, %class.TestNonTrivialConstructor* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4, !tbaa !7
  ret i32 %3
}

; Function Attrs: nounwind
define i32 @testfn(i32 %_param_0) #3 personality i32 (...)* @__gxx_personality_v0 {
entry:
  %param_0 = alloca i32
  %var_1 = alloca %class.TestNonTrivialConstructor
  %_cur_exception_object = alloca i8*
  %_cur_exception_type = alloca i32
  br label %body

body:                                             ; preds = %entry
  store i32 %_param_0, i32* %param_0
  %0 = load i32, i32* %param_0
  invoke void @_ZN7PochiVM16ReflectionHelper23function_wrapper_helperIXadL_ZN25TestNonTrivialConstructor7Create2EiEEE15call_fn_wrapperIS2_vE4callIJiEEEvPS2_DpT_(%class.TestNonTrivialConstructor* %var_1, i32 %0)
          to label %6 unwind label %landing_pad_0

unexpected_exn_terminate:                         ; preds = %landing_pad_0
  %1 = load i8*, i8** %_cur_exception_object
  %2 = call i8* @__cxa_begin_catch(i8* %1)
  call void @_ZSt9terminatev()
  unreachable

landing_pad_0:                                    ; preds = %body
  %3 = landingpad { i8*, i32 }
          cleanup
  %4 = extractvalue { i8*, i32 } %3, 0
  store i8* %4, i8** %_cur_exception_object
  %5 = extractvalue { i8*, i32 } %3, 1
  store i32 %5, i32* %_cur_exception_type
  br label %unexpected_exn_terminate

6:                                                ; preds = %body
  %7 = call i32 @_ZN25TestNonTrivialConstructor8GetValueEv(%class.TestNonTrivialConstructor* %var_1)
  call void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI25TestNonTrivialConstructorE9wrapperFnEPS2_(%class.TestNonTrivialConstructor* %var_1)
  ret i32 %7
}

; Function Attrs: nounwind
declare dso_local i8* @__cxa_begin_catch(i8*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @_ZSt9terminatev() #4

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }
attributes #5 = { noreturn }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 10.0.0 "}
!1 = !{i32 7, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!5, !5, i64 0}
!5 = !{!"vtable pointer", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !9, i64 0}
!8 = !{!"_ZTS25TestNonTrivialConstructor", !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !6, i64 0}
