; ModuleID = 'test'
source_filename = "test"

declare dso_local i32 @__gxx_personality_v0(...)

define zeroext i1 @f(i1 %_r_0, i32* %_dst_1, i64 %_offset_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %r_0 = alloca i8
  %dst_1 = alloca i32*
  %offset_2 = alloca i64
  br label %body

body:                                             ; preds = %entry
  %0 = zext i1 %_r_0 to i8
  store i8 %0, i8* %r_0
  store i32* %_dst_1, i32** %dst_1
  store i64 %_offset_2, i64* %offset_2
  %1 = load i32*, i32** %dst_1
  %2 = load i32, i32* %1
  %3 = add i32 %2, 1
  %4 = load i32*, i32** %dst_1
  store i32 %3, i32* %4
  %5 = load i32*, i32** %dst_1
  %6 = load i32, i32* %5
  %7 = load i32*, i32** %dst_1
  %8 = ptrtoint i32* %7 to i64
  %9 = load i64, i64* %offset_2
  %10 = mul i64 %9, 4
  %11 = add i64 %8, %10
  %12 = inttoptr i64 %11 to i32*
  store i32 %6, i32* %12
  %13 = load i8, i8* %r_0
  %14 = trunc i8 %13 to i1
  ret i1 %14
}

define zeroext i1 @logical_and(i32* %_out_0, i1 %_a_1, i1 %_b_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i8
  %b_2 = alloca i8
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  %0 = zext i1 %_a_1 to i8
  store i8 %0, i8* %a_1
  %1 = zext i1 %_b_2 to i8
  store i8 %1, i8* %b_2
  %2 = load i8, i8* %a_1
  %3 = trunc i8 %2 to i1
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 1)
  br i1 %5, label %logical_and_rhs0, label %logical_and_result0

logical_and_rhs0:                                 ; preds = %body
  %6 = load i8, i8* %b_2
  %7 = trunc i8 %6 to i1
  %8 = load i32*, i32** %out_0
  %9 = call i1 @f(i1 %7, i32* %8, i64 2)
  br label %logical_and_result0

logical_and_result0:                              ; preds = %logical_and_rhs0, %body
  %10 = phi i1 [ %5, %body ], [ %9, %logical_and_rhs0 ]
  ret i1 %10
}

define zeroext i1 @logical_fn_3(i32* %_out_0, i1 %_a_1, i1 %_b_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i8
  %b_2 = alloca i8
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  %0 = zext i1 %_a_1 to i8
  store i8 %0, i8* %a_1
  %1 = zext i1 %_b_2 to i8
  store i8 %1, i8* %b_2
  %2 = load i8, i8* %a_1
  %3 = trunc i8 %2 to i1
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 1)
  %6 = xor i1 %5, true
  br i1 %6, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %body
  %7 = load i8, i8* %b_2
  %8 = trunc i8 %7 to i1
  %9 = load i32*, i32** %out_0
  %10 = call i1 @f(i1 %8, i32* %9, i64 2)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_rhs0, %body
  %11 = phi i1 [ %6, %body ], [ %10, %logical_or_rhs0 ]
  ret i1 %11
}

define zeroext i1 @logical_fn_4(i32* %_out_0, i1 %_a_1, i1 %_b_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i8
  %b_2 = alloca i8
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  %0 = zext i1 %_a_1 to i8
  store i8 %0, i8* %a_1
  %1 = zext i1 %_b_2 to i8
  store i8 %1, i8* %b_2
  %2 = load i8, i8* %a_1
  %3 = trunc i8 %2 to i1
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 1)
  %6 = xor i1 %5, true
  br i1 %6, label %logical_and_rhs1, label %logical_and_result1

logical_and_rhs1:                                 ; preds = %body
  %7 = load i8, i8* %b_2
  %8 = trunc i8 %7 to i1
  %9 = load i32*, i32** %out_0
  %10 = call i1 @f(i1 %8, i32* %9, i64 2)
  br label %logical_and_result1

logical_and_result1:                              ; preds = %logical_and_rhs1, %body
  %11 = phi i1 [ %6, %body ], [ %10, %logical_and_rhs1 ]
  br i1 %11, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %logical_and_result1
  %12 = load i8, i8* %a_1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %logical_or_result2, label %logical_or_rhs2

logical_or_rhs2:                                  ; preds = %logical_or_rhs0
  %14 = load i8, i8* %b_2
  %15 = trunc i8 %14 to i1
  %16 = xor i1 %15, true
  br label %logical_or_result2

logical_or_result2:                               ; preds = %logical_or_rhs2, %logical_or_rhs0
  %17 = phi i1 [ %13, %logical_or_rhs0 ], [ %16, %logical_or_rhs2 ]
  %18 = load i32*, i32** %out_0
  %19 = call i1 @f(i1 %17, i32* %18, i64 3)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_result2, %logical_and_result1
  %20 = phi i1 [ %11, %logical_and_result1 ], [ %19, %logical_or_result2 ]
  ret i1 %20
}

define zeroext i1 @logical_fn_5(i32* %_out_0, i1 %_a_1, i1 %_b_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i8
  %b_2 = alloca i8
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  %0 = zext i1 %_a_1 to i8
  store i8 %0, i8* %a_1
  %1 = zext i1 %_b_2 to i8
  store i8 %1, i8* %b_2
  %2 = load i8, i8* %a_1
  %3 = trunc i8 %2 to i1
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 1)
  br i1 %5, label %logical_or_result1, label %logical_or_rhs1

logical_or_rhs1:                                  ; preds = %body
  %6 = load i8, i8* %b_2
  %7 = trunc i8 %6 to i1
  %8 = load i32*, i32** %out_0
  %9 = call i1 @f(i1 %7, i32* %8, i64 2)
  br label %logical_or_result1

logical_or_result1:                               ; preds = %logical_or_rhs1, %body
  %10 = phi i1 [ %5, %body ], [ %9, %logical_or_rhs1 ]
  %11 = load i32*, i32** %out_0
  %12 = call i1 @f(i1 %10, i32* %11, i64 3)
  br i1 %12, label %logical_and_rhs0, label %logical_and_result0

logical_and_rhs0:                                 ; preds = %logical_or_result1
  %13 = load i8, i8* %a_1
  %14 = trunc i8 %13 to i1
  %15 = load i32*, i32** %out_0
  %16 = call i1 @f(i1 %14, i32* %15, i64 4)
  br i1 %16, label %logical_and_rhs2, label %logical_and_result2

logical_and_rhs2:                                 ; preds = %logical_and_rhs0
  %17 = load i8, i8* %b_2
  %18 = trunc i8 %17 to i1
  %19 = load i32*, i32** %out_0
  %20 = call i1 @f(i1 %18, i32* %19, i64 5)
  br label %logical_and_result2

logical_and_result2:                              ; preds = %logical_and_rhs2, %logical_and_rhs0
  %21 = phi i1 [ %16, %logical_and_rhs0 ], [ %20, %logical_and_rhs2 ]
  %22 = load i32*, i32** %out_0
  %23 = call i1 @f(i1 %21, i32* %22, i64 6)
  %24 = xor i1 %23, true
  br label %logical_and_result0

logical_and_result0:                              ; preds = %logical_and_result2, %logical_or_result1
  %25 = phi i1 [ %12, %logical_or_result1 ], [ %24, %logical_and_result2 ]
  ret i1 %25
}

define zeroext i1 @logical_or(i32* %_out_0, i1 %_a_1, i1 %_b_2) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %out_0 = alloca i32*
  %a_1 = alloca i8
  %b_2 = alloca i8
  br label %body

body:                                             ; preds = %entry
  store i32* %_out_0, i32** %out_0
  %0 = zext i1 %_a_1 to i8
  store i8 %0, i8* %a_1
  %1 = zext i1 %_b_2 to i8
  store i8 %1, i8* %b_2
  %2 = load i8, i8* %a_1
  %3 = trunc i8 %2 to i1
  %4 = load i32*, i32** %out_0
  %5 = call i1 @f(i1 %3, i32* %4, i64 1)
  br i1 %5, label %logical_or_result0, label %logical_or_rhs0

logical_or_rhs0:                                  ; preds = %body
  %6 = load i8, i8* %b_2
  %7 = trunc i8 %6 to i1
  %8 = load i32*, i32** %out_0
  %9 = call i1 @f(i1 %7, i32* %8, i64 2)
  br label %logical_or_result0

logical_or_result0:                               ; preds = %logical_or_rhs0, %body
  %10 = phi i1 [ %5, %body ], [ %9, %logical_or_rhs0 ]
  ret i1 %10
}
