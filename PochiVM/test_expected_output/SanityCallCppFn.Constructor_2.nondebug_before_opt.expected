; ModuleID = 'test'
source_filename = "test"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" = type { i32*, i32*, i32* }

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind uwtable
define available_externally dso_local void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperISt6vectorIiSaIiEEE9wrapperFnEPS4_(%"class.std::vector"* %0) #0 align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8, !tbaa !4
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* nonnull %6) #7
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: uwtable
define available_externally dso_local void @_ZN7PochiVM16ReflectionHelper26constructor_wrapper_helperISt6vectorIiSaIiEEJmEE4callIJmEEEvPS4_DpT_(%"class.std::vector"* %0, i64 %1) #2 align 2 personality i32 (...)* @__gxx_personality_v0 {
  %3 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %3, i8 0, i64 24, i1 false) #7
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 %1, 4611686018427387903
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @_ZSt17__throw_bad_allocv() #8
  unreachable

8:                                                ; preds = %5
  %9 = shl nuw i64 %1, 2
  %10 = tail call i8* @_Znwm(i64 %9)
  %11 = bitcast i8* %10 to i32*
  br label %12

12:                                               ; preds = %8, %2
  %13 = phi i32* [ %11, %8 ], [ null, %2 ]
  %14 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32* %13, i32** %14, align 8, !tbaa !4
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32* %13, i32** %15, align 8, !tbaa !10
  %16 = getelementptr i32, i32* %13, i64 %1
  %17 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 2
  store i32* %16, i32** %17, align 8, !tbaa !11
  br i1 %4, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast i32* %13 to i8*
  %20 = shl nuw i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %20, i1 false)
  br label %21

21:                                               ; preds = %18, %12
  %22 = phi i32* [ %13, %12 ], [ %16, %18 ]
  store i32* %22, i32** %15, align 8, !tbaa !10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare dso_local noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: inlinehint uwtable
define available_externally dso_local void @_Z13CopyVectorIntPSt6vectorIiSaIiEES2_(%"class.std::vector"* %0, %"class.std::vector"* %1) #6 {
  %3 = tail call dereferenceable(24) %"class.std::vector"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%"class.std::vector"* %0, %"class.std::vector"* dereferenceable(24) %1)
  ret void
}

; Function Attrs: uwtable
declare dso_local dereferenceable(24) %"class.std::vector"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%"class.std::vector"*, %"class.std::vector"* dereferenceable(24)) local_unnamed_addr #2 align 2

define void @testfn(%"class.std::vector"* %_param_0, i64 %_param_1) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %param_0 = alloca %"class.std::vector"*
  %param_1 = alloca i64
  %var_2 = alloca %"class.std::vector"
  %_cur_exception_object = alloca i8*
  %_cur_exception_type = alloca i32
  br label %body

body:                                             ; preds = %entry
  store %"class.std::vector"* %_param_0, %"class.std::vector"** %param_0
  store i64 %_param_1, i64* %param_1
  %0 = load i64, i64* %param_1
  call void @_ZN7PochiVM16ReflectionHelper26constructor_wrapper_helperISt6vectorIiSaIiEEJmEE4callIJmEEEvPS4_DpT_(%"class.std::vector"* %var_2, i64 %0)
  %1 = load %"class.std::vector"*, %"class.std::vector"** %param_0
  invoke void @_Z13CopyVectorIntPSt6vectorIiSaIiEES2_(%"class.std::vector"* %1, %"class.std::vector"* %var_2)
          to label %9 unwind label %landing_pad_0

resume_exception:                                 ; preds = %dtor_tree_0
  %2 = load i8*, i8** %_cur_exception_object
  %3 = load i32, i32* %_cur_exception_type
  %4 = insertvalue { i8*, i32 } undef, i8* %2, 0
  %5 = insertvalue { i8*, i32 } %4, i32 %3, 1
  resume { i8*, i32 } %5

dtor_tree_0:                                      ; preds = %landing_pad_0
  call void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperISt6vectorIiSaIiEEE9wrapperFnEPS4_(%"class.std::vector"* %var_2)
  br label %resume_exception

landing_pad_0:                                    ; preds = %body
  %6 = landingpad { i8*, i32 }
          cleanup
  %7 = extractvalue { i8*, i32 } %6, 0
  store i8* %7, i8** %_cur_exception_object
  %8 = extractvalue { i8*, i32 } %6, 1
  store i32 %8, i32* %_cur_exception_type
  br label %dtor_tree_0

9:                                                ; preds = %body
  call void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperISt6vectorIiSaIiEEE9wrapperFnEPS4_(%"class.std::vector"* %var_2)
  ret void
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn }

!llvm.ident = !{!0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 10.0.0 "}
!1 = !{i32 7, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!5, !7, i64 0}
!5 = !{!"_ZTSSt12_Vector_baseIiSaIiEE", !6, i64 0}
!6 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE12_Vector_implE", !7, i64 0, !7, i64 8, !7, i64 16}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = !{!5, !7, i64 8}
!11 = !{!5, !7, i64 16}
