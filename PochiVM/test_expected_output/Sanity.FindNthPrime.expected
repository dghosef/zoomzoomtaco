; ModuleID = 'test'
source_filename = "test"

declare dso_local i32 @__gxx_personality_v0(...)

define i32 @find_nth_prime(i32 %_n_0) personality i32 (...)* @__gxx_personality_v0 {
entry:
  %n_0 = alloca i32
  %numPrimesFound_2 = alloca i32
  %valToTest_3 = alloca i32
  %isPrime_4 = alloca i8
  %i_1 = alloca i32
  br label %body

body:                                             ; preds = %entry
  store i32 %_n_0, i32* %n_0
  store i32 0, i32* %numPrimesFound_2
  store i32 1, i32* %valToTest_3
  br label %whileloop_head0

whileloop_head0:                                  ; preds = %after_if1, %body
  %0 = load i32, i32* %numPrimesFound_2
  %1 = load i32, i32* %n_0
  %2 = icmp slt i32 %0, %1
  br i1 %2, label %whileloop_body0, label %after_whileloop0

whileloop_body0:                                  ; preds = %whileloop_head0
  %3 = load i32, i32* %valToTest_3
  %4 = add i32 %3, 1
  store i32 %4, i32* %valToTest_3
  store i8 1, i8* %isPrime_4
  store i32 2, i32* %i_1
  br label %forloop_head0

forloop_head0:                                    ; preds = %forloop_step0, %whileloop_body0
  %5 = load i32, i32* %i_1
  %6 = load i32, i32* %i_1
  %7 = mul i32 %5, %6
  %8 = load i32, i32* %valToTest_3
  %9 = icmp sle i32 %7, %8
  br i1 %9, label %forloop_body0, label %after_forloop0

forloop_body0:                                    ; preds = %forloop_head0
  %10 = load i32, i32* %valToTest_3
  %11 = load i32, i32* %i_1
  %12 = srem i32 %10, %11
  %if0 = icmp eq i32 %12, 0
  br i1 %if0, label %then0, label %after_if0

then0:                                            ; preds = %forloop_body0
  store i8 0, i8* %isPrime_4
  br label %after_forloop0

after_if0:                                        ; preds = %forloop_body0
  br label %forloop_step0

forloop_step0:                                    ; preds = %after_if0
  %13 = load i32, i32* %i_1
  %14 = add i32 %13, 1
  store i32 %14, i32* %i_1
  br label %forloop_head0

after_forloop0:                                   ; preds = %then0, %forloop_head0
  %15 = load i8, i8* %isPrime_4
  %if1 = trunc i8 %15 to i1
  br i1 %if1, label %then1, label %after_if1

then1:                                            ; preds = %after_forloop0
  %16 = load i32, i32* %numPrimesFound_2
  %17 = add i32 %16, 1
  store i32 %17, i32* %numPrimesFound_2
  br label %after_if1

after_if1:                                        ; preds = %then1, %after_forloop0
  br label %whileloop_head0

after_whileloop0:                                 ; preds = %whileloop_head0
  %18 = load i32, i32* %valToTest_3
  ret i32 %18
}
