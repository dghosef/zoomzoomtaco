; ModuleID = 'test'
source_filename = "test"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.TestDestructor2 = type <{ %class.CtorDtorOrderRecorder*, i32, [4 x i8] }>
%class.CtorDtorOrderRecorder = type { i32, %"class.std::vector" }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" = type { i32*, i32*, i32* }
%class.TestNonTrivialConstructor = type { i32 }
%"class.std::bad_function_call" = type { %"class.std::exception" }
%"class.std::exception" = type { i32 (...)** }

@_ZTI25TestNonTrivialConstructor = external dso_local constant { i8*, i8* }
@_ZTVSt17bad_function_call = external dso_local unnamed_addr constant { [5 x i8*] }, align 8
@_ZTISt17bad_function_call = external dso_local constant i8*

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind uwtable
declare dso_local void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI15TestDestructor2E9wrapperFnEPS2_(%class.TestDestructor2*) local_unnamed_addr #0 align 2

; Function Attrs: uwtable
declare dso_local void @_ZN7PochiVM16ReflectionHelper26constructor_wrapper_helperI15TestDestructor2JP21CtorDtorOrderRecorderiEE4callIJS4_iEEEvPS2_DpT_(%class.TestDestructor2*, %class.CtorDtorOrderRecorder*, i32) local_unnamed_addr #1 align 2

declare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr

declare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr

; Function Attrs: nounwind
declare dso_local void @__cxa_free_exception(i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
declare dso_local void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI25TestNonTrivialConstructorE9wrapperFnEPS2_(%class.TestNonTrivialConstructor*) #0 align 2

; Function Attrs: nounwind
declare dso_local void @_ZNSt17bad_function_callD1Ev(%"class.std::bad_function_call"*) unnamed_addr #3

define void @testfn(i32 %_param_0, %class.CtorDtorOrderRecorder* %_param_1) local_unnamed_addr personality i32 (...)* @__gxx_personality_v0 {
entry:
  %var_2 = alloca %class.TestDestructor2, align 8
  call void @_ZN7PochiVM16ReflectionHelper26constructor_wrapper_helperI15TestDestructor2JP21CtorDtorOrderRecorderiEE4callIJS4_iEEEvPS2_DpT_(%class.TestDestructor2* nonnull %var_2, %class.CtorDtorOrderRecorder* %_param_1, i32 233)
  %0 = call i8* @__cxa_allocate_exception(i64 4)
  %1 = icmp eq i32 %_param_0, 12345
  br i1 %1, label %2, label %10

2:                                                ; preds = %entry
  %3 = call i8* @__cxa_allocate_exception(i64 8) #2
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVSt17bad_function_call, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !4
  invoke void @__cxa_throw(i8* %3, i8* bitcast (i8** @_ZTISt17bad_function_call to i8*), i8* bitcast (void (%"class.std::bad_function_call"*)* @_ZNSt17bad_function_callD1Ev to i8*)) #4
          to label %.noexc unwind label %landing_pad_0

.noexc:                                           ; preds = %2
  unreachable

dtor_tree_0:                                      ; preds = %landing_pad_1, %landing_pad_0
  %_cur_exception_object.0 = phi i8* [ %13, %landing_pad_1 ], [ %8, %landing_pad_0 ]
  %_cur_exception_type.0 = phi i32 [ %14, %landing_pad_1 ], [ %9, %landing_pad_0 ]
  call void @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI15TestDestructor2E9wrapperFnEPS2_(%class.TestDestructor2* nonnull %var_2)
  %5 = insertvalue { i8*, i32 } undef, i8* %_cur_exception_object.0, 0
  %6 = insertvalue { i8*, i32 } %5, i32 %_cur_exception_type.0, 1
  resume { i8*, i32 } %6

landing_pad_0:                                    ; preds = %2
  %7 = landingpad { i8*, i32 }
          cleanup
  %8 = extractvalue { i8*, i32 } %7, 0
  %9 = extractvalue { i8*, i32 } %7, 1
  call void @__cxa_free_exception(i8* %0)
  br label %dtor_tree_0

10:                                               ; preds = %entry
  %11 = bitcast i8* %0 to i32*
  store i32 %_param_0, i32* %11, align 4
  invoke void @__cxa_throw(i8* %0, i8* bitcast ({ i8*, i8* }* @_ZTI25TestNonTrivialConstructor to i8*), i8* bitcast (void (%class.TestNonTrivialConstructor*)* @_ZN7PochiVM16ReflectionHelper25destructor_wrapper_helperI25TestNonTrivialConstructorE9wrapperFnEPS2_ to i8*))
          to label %15 unwind label %landing_pad_1

landing_pad_1:                                    ; preds = %10
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  %14 = extractvalue { i8*, i32 } %12, 1
  br label %dtor_tree_0

15:                                               ; preds = %10
  unreachable
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.ident = !{!0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 10.0.0 "}
!1 = !{i32 7, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{!5, !5, i64 0}
!5 = !{!"vtable pointer", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
